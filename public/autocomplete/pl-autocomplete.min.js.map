{"version":3,"sources":["autocomplete/pl-autocomplete.js"],"names":["window","Ractive","controller","component","data","el","config","done","_refresh","top","_$el","input","offset","width","outerWidth","height","outerHeight","Autocomplete","set","get","length","listContent","_select","select","event","val","blur","_change","change","plName","$","extend","focused","inEdition","listfocused","listTop","listWidth","listHeight","selection","partials","templateDefault","join","refresh","find","list","template","on","original","stopPropagation","preventDefault","context","value","focus","charCode","keyCode","observe","setTimeout"],"mappings":"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","file":"autocomplete/pl-autocomplete.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  window.Ractive.controller('pl-autocomplete', function(component, data, el, config, done) {\n\n    var Autocomplete = component({\n          plName: 'pl-autocomplete',\n          data: $.extend(true, {\n            focused: false,\n            inEdition: false,\n            listfocused: -1,\n            listTop: 0,\n            listWidth: 0,\n            listHeight: 0,\n            selection: ''\n          }, data),\n          partials: $.extend(true, {\n            templateDefault: [\n            '<div ',\n              'class=\"pl-autocomplete-list-item {{listfocused == @index ? \\'focused\\' : \\'\\'}}\" ',\n              'on-mousedown=\"selectListItem\"',\n            '>',\n              '{{{display}}}',\n            '</div>'\n            ].join('')\n          }, config.partials),\n\n          refresh: function() {\n            _refresh();\n          }\n        }),\n        _$el = {\n          window: $(window),\n          input: $(Autocomplete.el).find('.pl-autocomplete-input'),\n          selection: $(Autocomplete.el).find('.pl-autocomplete-selection'),\n          list: $(Autocomplete.el).find('.pl-autocomplete-list'),\n          listContent: $(Autocomplete.el).find('.pl-autocomplete-list-content')\n        };\n\n    function _refresh() {\n      var top = _$el.input.offset().top,\n          width = _$el.input.outerWidth(),\n          height = _$el.input.outerHeight();\n\n      Autocomplete.set('inEdition', Autocomplete.get('focused') && Autocomplete.get('list') && Autocomplete.get('list').length);\n\n      Autocomplete.set('listWidth', width);\n      Autocomplete.set('listHeight', Autocomplete.get('focused') ? _$el.listContent.outerHeight() : 0);\n\n      if (top + (height - 2) + Autocomplete.get('listHeight') > _$el.window.height()) {\n        Autocomplete.set('listFromBottom', true);\n        Autocomplete.set('listTop', -Autocomplete.get('listHeight') + 2);\n      }\n      else {\n        Autocomplete.set('listFromBottom', false);\n        Autocomplete.set('listTop', height - 2);\n      }\n\n      Autocomplete.set('selectionWidth', width);\n    }\n\n    function _select() {\n      var select = Autocomplete.get('select');\n      if (select) {\n        select(event, _$el.input.val());\n      }\n\n      _$el.input.blur();\n    }\n\n    function _change() {\n      var change = Autocomplete.get('change');\n      if (change) {\n        change(event, _$el.input.val());\n      }\n    }\n\n    Autocomplete.partials.template = Autocomplete.partials.template || Autocomplete.partials.templateDefault;\n\n    Autocomplete.on('selectListItem', function(event) {\n      event.original.stopPropagation();\n      event.original.preventDefault();\n\n      _$el.input.val(event.context.value);\n\n      _change();\n    });\n\n    Autocomplete.on('inputFocus', function(event) {\n      Autocomplete.set('focused', true);\n\n      _refresh();\n\n      var focus = Autocomplete.get('focus');\n      if (focus) {\n        focus(event, _$el.input.val());\n      }\n    });\n\n    Autocomplete.on('inputBlur', function(event) {\n      Autocomplete.set('focused', false);\n\n      _refresh();\n\n      var blur = Autocomplete.get('blur');\n      if (blur) {\n        blur(event, _$el.input.val());\n      }\n    });\n\n    Autocomplete.on('inputKeyup', function(event) {\n      var charCode = event.original.charCode ? event.original.charCode : event.original.keyCode,\n          selection = Autocomplete.get('selection'),\n          list = Autocomplete.get('list'),\n          listfocused = Autocomplete.get('listfocused');\n\n      // Right\n      if (charCode == 39 && selection) {\n        _$el.input.val(selection);\n\n        _change();\n\n        return;\n      }\n\n      // Top - Bottom\n      if ((charCode == 38 || charCode == 40) && list && list.length) {\n        listfocused = listfocused + (charCode == 38 ? -1 : 1);\n        listfocused = listfocused == -2 ? list.length - 1 : listfocused;\n        listfocused = listfocused == list.length ? -1 : listfocused;\n\n        Autocomplete.set('listfocused', listfocused);\n\n        return;\n      }\n\n      // Enter\n      if (charCode == 13) {\n        if (!list || !list.length || listfocused === -1) {\n          _select();\n        }\n        else if (list && list.length && list[listfocused]) {\n          _$el.input.val(list[listfocused].value);\n\n          Autocomplete.set('listfocused', -1);\n\n          _change();\n        }\n\n        return;\n      }\n\n      _change();\n    });\n\n    Autocomplete.observe('list', function(list) {\n      Autocomplete.set('selection', list && list.length && list[0].value || '');\n      Autocomplete.set('listfocused', -1);\n\n      setTimeout(_refresh);\n    });\n\n    done();\n  });\n\n})();\n"],"sourceRoot":"/source/"}